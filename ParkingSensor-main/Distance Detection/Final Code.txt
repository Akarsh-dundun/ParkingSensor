#include "U8glib.h"

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_DEV_0 | U8G_I2C_OPT_NO_ACK | U8G_I2C_OPT_FAST); // Fast I2C / TWI

// 'car', 56x16px
const unsigned char bitmap_car [] PROGMEM = {
	0x67, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xe6, 0x70, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x0e, 0x7f, 0xfc, 
	0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x06, 0x63, 0xf8, 0x00, 0x00, 
	0x00, 0x1f, 0xc6, 0x63, 0xf0, 0x02, 0x12, 0x78, 0x0f, 0xc6, 0x20, 0x70, 0x05, 0x14, 0x48, 0x0e, 
	0x04, 0x20, 0x00, 0x08, 0x98, 0x48, 0x00, 0x04, 0x10, 0x00, 0x0f, 0x94, 0x48, 0x00, 0x08, 0x0e, 
	0x00, 0x08, 0x92, 0x78, 0x00, 0x70, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x83, 0xff, 
	0xff, 0xff, 0xc1, 0x80, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x23, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x80, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x07, 0x80
};
// 'sensor_01_a_off', 32x14px
const unsigned char bitmap_sensor_01_a_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x01, 0x55, 0x00, 0x00, 0x02, 0xaa, 0xa0, 0x00, 
	0x05, 0x55, 0x55, 0x00, 0x02, 0xaa, 0xaa, 0xa0, 0x05, 0x55, 0x55, 0x50, 0x02, 0xaa, 0xaa, 0xa0, 
	0x01, 0x55, 0x55, 0x50, 0x00, 0x2a, 0xaa, 0xa0, 0x00, 0x05, 0x55, 0x50, 0x00, 0x00, 0xaa, 0xa0, 
	0x00, 0x00, 0x15, 0x50, 0x00, 0x00, 0x00, 0xa0
};
// 'sensor_01_a_on', 32x14px
const unsigned char bitmap_sensor_01_a_on [] PROGMEM = {
	0x00, 0x20, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x03, 0xff, 0xf0, 0x00, 
	0x07, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf0, 
	0x01, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xf0, 
	0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x01, 0xe0
};
// 'sensor_01_b_off', 32x16px
const unsigned char bitmap_sensor_01_b_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x05, 0x54, 0x00, 0x00, 
	0x02, 0xaa, 0x80, 0x00, 0x05, 0x55, 0x54, 0x00, 0x0a, 0xaa, 0xaa, 0x80, 0x15, 0x55, 0x55, 0x54, 
	0x0a, 0xaa, 0xaa, 0xa8, 0x01, 0x55, 0x55, 0x54, 0x00, 0xaa, 0xaa, 0xa8, 0x00, 0x15, 0x55, 0x54, 
	0x00, 0x02, 0xaa, 0xa8, 0x00, 0x00, 0x55, 0x50, 0x00, 0x00, 0x02, 0xa8, 0x00, 0x00, 0x00, 0x50
};
// 'sensor_01_b_on', 32x16px
const unsigned char bitmap_sensor_01_b_on [] PROGMEM = {
	0x01, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 
	0x07, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xfc, 
	0x0f, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xfc, 
	0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x78
};
// 'sensor_01_c_off', 32x17px
const unsigned char bitmap_sensor_01_c_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x15, 0x40, 0x00, 0x00, 0x0a, 0xa8, 0x00, 0x00, 
	0x15, 0x55, 0x00, 0x00, 0x2a, 0xaa, 0xa0, 0x00, 0x55, 0x55, 0x54, 0x00, 0x2a, 0xaa, 0xaa, 0xa0, 
	0x55, 0x55, 0x55, 0x54, 0x0a, 0xaa, 0xaa, 0xaa, 0x01, 0x55, 0x55, 0x54, 0x00, 0xaa, 0xaa, 0xa8, 
	0x00, 0x15, 0x55, 0x54, 0x00, 0x02, 0xaa, 0xa8, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x02, 0xa8, 
	0x00, 0x00, 0x00, 0x14
};
// 'sensor_01_c_on', 32x17px
const unsigned char bitmap_sensor_01_c_on [] PROGMEM = {
	0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 
	0x3f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xe0, 
	0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xfc, 
	0x00, 0x1f, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x03, 0xfc, 
	0x00, 0x00, 0x00, 0x3c
};
// 'sensor_01_d_off', 32x19px
const unsigned char bitmap_sensor_01_d_off [] PROGMEM = {
	0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x2a, 0xa0, 0x00, 0x00, 
	0x55, 0x54, 0x00, 0x00, 0x2a, 0xaa, 0x80, 0x00, 0x55, 0x55, 0x50, 0x00, 0x2a, 0xaa, 0xaa, 0x00, 
	0x15, 0x55, 0x55, 0x50, 0x0a, 0xaa, 0xaa, 0xaa, 0x05, 0x55, 0x55, 0x55, 0x00, 0xaa, 0xaa, 0xaa, 
	0x00, 0x15, 0x55, 0x55, 0x00, 0x0a, 0xaa, 0xaa, 0x00, 0x00, 0x55, 0x54, 0x00, 0x00, 0x0a, 0xaa, 
	0x00, 0x00, 0x01, 0x54, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00
};
// 'sensor_01_d_on', 32x19px
const unsigned char bitmap_sensor_01_d_on [] PROGMEM = {
	0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 
	0x7f, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0x00, 
	0x3f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 
	0x00, 0x3f, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xfe, 
	0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00
};
// 'sensor_02_a_off', 32x9px
const unsigned char bitmap_sensor_02_a_off [] PROGMEM = {
	0x02, 0xaa, 0xaa, 0x80, 0x05, 0x55, 0x55, 0x40, 0x0a, 0xaa, 0xaa, 0xa0, 0x05, 0x55, 0x55, 0x40, 
	0x0a, 0xaa, 0xaa, 0xa0, 0x05, 0x55, 0x55, 0x40, 0x0a, 0xaa, 0xaa, 0xa0, 0x05, 0x55, 0x55, 0x40, 
	0x0a, 0xaa, 0xaa, 0xa0
};
// 'sensor_02_a_on', 32x9px
const unsigned char bitmap_sensor_02_a_on [] PROGMEM = {
	0x07, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xe0, 
	0x0f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xe0, 
	0x1f, 0xff, 0xff, 0xf0
};
// 'sensor_02_b_off', 32x9px
const unsigned char bitmap_sensor_02_b_off [] PROGMEM = {
	0x0a, 0xaa, 0xaa, 0xa0, 0x15, 0x55, 0x55, 0x50, 0x0a, 0xaa, 0xaa, 0xa0, 0x15, 0x55, 0x55, 0x50, 
	0x0a, 0xaa, 0xaa, 0xa0, 0x15, 0x55, 0x55, 0x50, 0x2a, 0xaa, 0xaa, 0xa8, 0x15, 0x55, 0x55, 0x50, 
	0x0a, 0xaa, 0xaa, 0xa0
};
// 'sensor_02_b_on', 32x9px
const unsigned char bitmap_sensor_02_b_on [] PROGMEM = {
	0x1f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xf0, 
	0x1f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 
	0x1f, 0xff, 0xff, 0xf0
};
// 'sensor_02_c_off', 32x10px
const unsigned char bitmap_sensor_02_c_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x2a, 0xaa, 0xaa, 0xa8, 0x15, 0x55, 0x55, 0x50, 0x2a, 0xaa, 0xaa, 0xa8, 
	0x55, 0x55, 0x55, 0x54, 0x2a, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x54, 0x2a, 0xaa, 0xaa, 0xa8, 
	0x55, 0x55, 0x55, 0x54, 0x0a, 0xaa, 0xaa, 0xa0
};
// 'sensor_02_c_on', 32x10px
const unsigned char bitmap_sensor_02_c_on [] PROGMEM = {
	0x20, 0x00, 0x00, 0x08, 0x3f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xfc, 
	0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 
	0x7f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf0
};
// 'sensor_02_d_off', 40x10px
const unsigned char bitmap_sensor_02_d_off [] PROGMEM = {
	0x02, 0x00, 0x00, 0x00, 0x20, 0x05, 0x55, 0x55, 0x55, 0x50, 0x02, 0xaa, 0xaa, 0xaa, 0xa0, 0x05, 
	0x55, 0x55, 0x55, 0x50, 0x02, 0xaa, 0xaa, 0xaa, 0xa0, 0x05, 0x55, 0x55, 0x55, 0x50, 0x0a, 0xaa, 
	0xaa, 0xaa, 0xa8, 0x05, 0x55, 0x55, 0x55, 0x50, 0x0a, 0xaa, 0xaa, 0xaa, 0xa8, 0x01, 0x55, 0x55, 
	0x55, 0x40
};
// 'sensor_02_d_on', 40x10px
const unsigned char bitmap_sensor_02_d_on [] PROGMEM = {
	0x07, 0x00, 0x00, 0x00, 0x70, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x07, 
	0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
	0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 
	0xff, 0xc0
};
// 'sensor_03_a_off', 32x14px
const unsigned char bitmap_sensor_03_a_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x00, 0x00, 0x55, 0x40, 0x00, 0x02, 0xaa, 0xa0, 
	0x00, 0x55, 0x55, 0x50, 0x02, 0xaa, 0xaa, 0xa0, 0x05, 0x55, 0x55, 0x50, 0x02, 0xaa, 0xaa, 0xa0, 
	0x05, 0x55, 0x55, 0x40, 0x02, 0xaa, 0xaa, 0x00, 0x05, 0x55, 0x50, 0x00, 0x02, 0xaa, 0x80, 0x00, 
	0x05, 0x54, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00
};
// 'sensor_03_a_on', 32x14px
const unsigned char bitmap_sensor_03_a_on [] PROGMEM = {
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xe0, 
	0x00, 0x7f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf0, 
	0x07, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xc0, 0x00, 
	0x07, 0xfc, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00
};
// 'sensor_03_b_off', 32x16px
const unsigned char bitmap_sensor_03_b_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0xa0, 0x00, 0x00, 0x15, 0x50, 
	0x00, 0x00, 0xaa, 0xa0, 0x00, 0x15, 0x55, 0x50, 0x00, 0xaa, 0xaa, 0xa8, 0x15, 0x55, 0x55, 0x54, 
	0x0a, 0xaa, 0xaa, 0xa8, 0x15, 0x55, 0x55, 0x40, 0x0a, 0xaa, 0xaa, 0x80, 0x15, 0x55, 0x54, 0x00, 
	0x0a, 0xaa, 0xa0, 0x00, 0x05, 0x55, 0x00, 0x00, 0x0a, 0xa0, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00
};
// 'sensor_03_b_on', 32x16px
const unsigned char bitmap_sensor_03_b_on [] PROGMEM = {
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f, 0xf0, 
	0x00, 0x01, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xfc, 
	0x1f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xfc, 0x00, 
	0x0f, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00
};
// 'sensor_03_c_off', 32x17px
const unsigned char bitmap_sensor_03_c_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x02, 0xa8, 0x00, 0x00, 0x15, 0x50, 
	0x00, 0x00, 0xaa, 0xa8, 0x00, 0x05, 0x55, 0x54, 0x00, 0x2a, 0xaa, 0xaa, 0x05, 0x55, 0x55, 0x54, 
	0x2a, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x50, 0x2a, 0xaa, 0xaa, 0x80, 0x15, 0x55, 0x55, 0x00, 
	0x2a, 0xaa, 0xa8, 0x00, 0x15, 0x55, 0x40, 0x00, 0x2a, 0xa8, 0x00, 0x00, 0x15, 0x40, 0x00, 0x00, 
	0x28, 0x00, 0x00, 0x00
};
// 'sensor_03_c_on', 32x17px
const unsigned char bitmap_sensor_03_c_on [] PROGMEM = {
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 
	0x00, 0x00, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x7f, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xfe, 
	0x7f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0x00, 
	0x3f, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 
	0x3c, 0x00, 0x00, 0x00
};
// 'sensor_03_d_off', 32x18px
const unsigned char bitmap_sensor_03_d_off [] PROGMEM = {
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x02, 0xaa, 
	0x00, 0x00, 0x15, 0x55, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x05, 0x55, 0x55, 0x00, 0x2a, 0xaa, 0xaa, 
	0x05, 0x55, 0x55, 0x54, 0x2a, 0xaa, 0xaa, 0xa8, 0x55, 0x55, 0x55, 0x50, 0x2a, 0xaa, 0xaa, 0x80, 
	0x55, 0x55, 0x54, 0x00, 0x2a, 0xaa, 0xa0, 0x00, 0x15, 0x55, 0x00, 0x00, 0x2a, 0xa8, 0x00, 0x00, 
	0x15, 0x40, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00
};
// 'sensor_03_d_on', 32x18px
const unsigned char bitmap_sensor_03_d_on [] PROGMEM = {
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x03, 0xfe, 
	0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 
	0x0f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xc0, 
	0x7f, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xfc, 0x00, 0x00, 
	0x3f, 0xc0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00
};
// 'unit_cms', 24x10px
const unsigned char bitmap_unit_cms [] PROGMEM = {
	0xe0, 0x01, 0xc0, 0x80, 0x00, 0x40, 0xbe, 0xff, 0x40, 0xb6, 0xdb, 0x40, 0x30, 0xdb, 0x00, 0x30, 
	0xdb, 0x00, 0xb6, 0xdb, 0x40, 0xbe, 0xdb, 0x40, 0x80, 0x00, 0x40, 0xe0, 0x01, 0xc0
};
// 'sound_on', 24x10px
const unsigned char bitmap_sound_on [] PROGMEM = {
	0x03, 0x80, 0x07, 0x02, 0x0c, 0x21, 0x02, 0x1c, 0x11, 0x02, 0x3c, 0x49, 0x00, 0x7d, 0x28, 0x00, 
	0x7d, 0x28, 0x02, 0x3c, 0x49, 0x02, 0x1c, 0x11, 0x02, 0x0c, 0x21, 0x03, 0x80, 0x07
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 2176)
const int bitmap_allArray_LEN = 27;
const unsigned char* bitmap_allArray[27] = {
	bitmap_car,
	bitmap_sensor_01_a_off,
	bitmap_sensor_01_a_on,
	bitmap_sensor_01_b_off,
	bitmap_sensor_01_b_on,
	bitmap_sensor_01_c_off,
	bitmap_sensor_01_c_on,
	bitmap_sensor_01_d_off,
	bitmap_sensor_01_d_on,
	bitmap_sensor_02_a_off,
	bitmap_sensor_02_a_on,
	bitmap_sensor_02_b_off,
	bitmap_sensor_02_b_on,
	bitmap_sensor_02_c_off,
	bitmap_sensor_02_c_on,
	bitmap_sensor_02_d_off,
	bitmap_sensor_02_d_on,
	bitmap_sensor_03_a_off,
	bitmap_sensor_03_a_on,
	bitmap_sensor_03_b_off,
	bitmap_sensor_03_b_on,
	bitmap_sensor_03_c_off,
	bitmap_sensor_03_c_on,
	bitmap_sensor_03_d_off,
	bitmap_sensor_03_d_on,
	bitmap_sound_on,
	bitmap_unit_cms
};

/*
  Fontname: Gamer_digits
  Copyright: Created with Fony 1.4.7
  Capital A Height: 0, '1' Height: 6
  Calculated Max Values w= 5 h= 6 x= 1 y= 0 dx= 6 dy= 0 ascent= 0 len= 6
  Font Bounding box     w= 9 h= 5 x= 0 y=-6
  Calculated Min Values           x= 0 y=-6 dx= 0 dy= 0
  Pure Font   ascent = 6 descent= 0
  X Font      ascent = 6 descent= 0
  Max Font    ascent = 0 descent=-6
*/

const u8g_fntpgm_uint8_t Gamer_digits[137] U8G_FONT_SECTION("Gamer_digits") = {
  0,9,5,0,250,6,0,0,0,0,48,57,0,0,250,6,
  0,5,6,6,6,0,250,248,216,216,216,216,248,4,6,6,
  6,1,250,224,96,96,96,96,240,5,6,6,6,0,250,248,
  24,120,192,192,248,5,6,6,6,0,250,248,24,248,24,216,
  248,5,6,6,6,0,250,56,120,216,248,24,24,5,6,6,
  6,0,250,248,192,248,24,24,248,5,6,6,6,0,250,248,
  128,248,216,216,248,5,6,6,6,0,250,248,24,24,24,24,
  24,5,6,6,6,0,250,248,216,248,216,216,248,5,6,6,
  6,0,250,248,216,216,248,24,248};


#define sensor_1_PIN_TRIG 11
#define sensor_1_PIN_ECHO 12
#define sensor_2_PIN_TRIG 5
#define sensor_2_PIN_ECHO 4
#define sensor_3_PIN_TRIG 3
#define sensor_3_PIN_ECHO 2

#define led_red 7
#define buzzer 8

#define NUMBER_OF_SENSORS 3

struct sensor_data{
  int trig_pin;
  int echo_pin;
  int measured_distance_cm;
  int xpos; // For the position of the string
  int ypos;
  int label_width;//Creating the label width
  int starting_x_pos;
  int starting_y_pos;
  int ending_x_pos;
  int ending_y_pos;
};

char buffer[10];

struct sensor_data sensor[NUMBER_OF_SENSORS];

//Defining the minimum and maximum distance that can be detected
int min_dist = 2;
int max_dist = 100;

//Defining the step values for the on/off state of the tiles
int dist_step_01;
int dist_step_02;
int dist_step_03;
int dist_step_04;

//defining the minimum distance
int minimum;

void setup() {
  Serial.begin(115200);

  dist_step_01 = min_dist + round((max_dist - min_dist) / 4.0 * 1.0);
  dist_step_02 = min_dist + round((max_dist - min_dist) / 4.0 * 2.0);
  dist_step_03 = min_dist + round((max_dist - min_dist) / 4.0 * 3.0);
  dist_step_04 = min_dist + round((max_dist - min_dist) / 4.0 * 4.0);

  sensor[0].echo_pin = sensor_1_PIN_ECHO;
  sensor[1].echo_pin = sensor_2_PIN_ECHO;
  sensor[2].echo_pin = sensor_3_PIN_ECHO;
  
  sensor[0].trig_pin = sensor_1_PIN_TRIG;
  sensor[1].trig_pin = sensor_2_PIN_TRIG;
  sensor[2].trig_pin = sensor_3_PIN_TRIG;

  pinMode(sensor[0].trig_pin, OUTPUT);
  pinMode(sensor[0].echo_pin, INPUT);
  pinMode(sensor[1].trig_pin, OUTPUT);
  pinMode(sensor[1].echo_pin, INPUT);
  pinMode(sensor[2].trig_pin, OUTPUT);
  pinMode(sensor[2].echo_pin, INPUT);

  pinMode(led_red,OUTPUT);
  pinMode(buzzer,OUTPUT);

  //Setting the xpos and ypos for the sensor values
  sensor[0].starting_x_pos = 41;
  sensor[0].starting_y_pos = 21;
  sensor[0].ending_x_pos = 29;
  sensor[0].ending_y_pos = 57;
  
  sensor[1].starting_x_pos = 63;
  sensor[1].starting_y_pos = 23;
  sensor[1].ending_x_pos = 63;
  sensor[1].ending_y_pos = 61;
  
  sensor[2].starting_x_pos = 85;
  sensor[2].starting_y_pos = 21;
  sensor[2].ending_x_pos = 97;
  sensor[2].ending_y_pos = 57;

  u8g.setFont(Gamer_digits);
  u8g.setColorIndex(1); //Setting the color to white
}

void loop() {  
  
  for (int i = 0; i < NUMBER_OF_SENSORS; i++){
    // Start a new measurement:
    digitalWrite(sensor[i].trig_pin, HIGH);
    delayMicroseconds(10);
    digitalWrite(sensor[i].trig_pin, LOW);

    // Read the result:
    sensor[i].measured_distance_cm = pulseIn(sensor[i].echo_pin, HIGH);
    sensor[i].measured_distance_cm = round(sensor[i].measured_distance_cm * 0.0343 / 2.0);
  
    Serial.print("Sensor ");
    Serial.print(i);
    Serial.print(" ");
    Serial.println(sensor[i].measured_distance_cm);

    itoa(sensor[i].measured_distance_cm, buffer, 10);
    sensor[i].label_width = u8g.getStrWidth(buffer);

    sensor[i].xpos = map(constrain(sensor[i].measured_distance_cm, min_dist, max_dist), min_dist, max_dist, sensor[i].starting_x_pos, sensor[i].ending_x_pos);
    sensor[i].ypos = map(constrain(sensor[i].measured_distance_cm, min_dist, max_dist), min_dist, max_dist, sensor[i].starting_y_pos, sensor[i].ending_y_pos);  
  }

  
  
  if ((sensor[0].measured_distance_cm < 10) || (sensor[1].measured_distance_cm < 10) || (sensor[2].measured_distance_cm < 10)){
    digitalWrite(led_red,HIGH);
    digitalWrite(buzzer,HIGH);
  }else{
    digitalWrite(led_red,LOW);
    digitalWrite(buzzer,LOW);
  }

  delay(100);

  u8g.firstPage();
  do {
    u8g.drawBitmapP(36,0,56/8,16,bitmap_car);
    u8g.drawBitmapP(0,0,24/8,10,bitmap_unit_cms);
    u8g.drawBitmapP(104,0,24/8,10,bitmap_sound_on);

    u8g.drawBitmapP(23,18,32/8,14,((sensor[0].measured_distance_cm > dist_step_01) ? bitmap_sensor_01_a_on:bitmap_sensor_01_a_off));
    u8g.drawBitmapP(20,26,32/8,16,((sensor[0].measured_distance_cm > dist_step_02) ? bitmap_sensor_01_b_on:bitmap_sensor_01_b_off));
    u8g.drawBitmapP(18,35,32/8,17,((sensor[0].measured_distance_cm > dist_step_03) ? bitmap_sensor_01_c_on:bitmap_sensor_01_c_off));
    u8g.drawBitmapP(15,44,32/8,19,((sensor[0].measured_distance_cm > dist_step_04) ? bitmap_sensor_01_d_on:bitmap_sensor_01_d_off));
    
    u8g.drawBitmapP(48,24,32/8,9,((sensor[1].measured_distance_cm > dist_step_01) ? bitmap_sensor_02_a_on:bitmap_sensor_02_a_off));
    u8g.drawBitmapP(48,34,32/8,9,((sensor[1].measured_distance_cm > dist_step_02) ? bitmap_sensor_02_b_on:bitmap_sensor_02_b_off));
    u8g.drawBitmapP(48,43,32/8,10,((sensor[1].measured_distance_cm > dist_step_03) ? bitmap_sensor_02_c_on:bitmap_sensor_02_c_off));
    u8g.drawBitmapP(43,53,40/8,10,((sensor[1].measured_distance_cm > dist_step_04) ? bitmap_sensor_02_d_on:bitmap_sensor_02_d_off));
    
    u8g.drawBitmapP(71,18,32/8,14,((sensor[2].measured_distance_cm > dist_step_01) ? bitmap_sensor_03_a_on:bitmap_sensor_03_a_off));
    u8g.drawBitmapP(74,26,32/8,16,((sensor[2].measured_distance_cm > dist_step_02) ? bitmap_sensor_03_b_on:bitmap_sensor_03_b_off));
    u8g.drawBitmapP(77,35,32/8,17,((sensor[2].measured_distance_cm > dist_step_03) ? bitmap_sensor_03_c_on:bitmap_sensor_03_c_off));
    u8g.drawBitmapP(79,44,32/8,18,((sensor[2].measured_distance_cm > dist_step_04) ? bitmap_sensor_03_d_on:bitmap_sensor_03_d_off));
  
    for (int i = 0; i < NUMBER_OF_SENSORS; i++){
      u8g.setColorIndex(0); //Setting the color to black
      u8g.drawBox((sensor[i].xpos - sensor[i].label_width / 2) - 1,sensor[i].ypos - 4,sensor[i].label_width + 2,8);
      itoa(sensor[i].measured_distance_cm, buffer, 10);
      u8g.setColorIndex(1);
      u8g.drawStr(sensor[i].xpos - sensor[i].label_width / 2, sensor[i].ypos - 3, buffer);
    }
  
  } while ( u8g.nextPage() ); 
}
